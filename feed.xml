<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GANKKANK</title>
    <description>IT blogs about DEVOPS, ruby, chef and open source tools like redmine, docker, gitlab, KVM and cloud services like AWS. Through as a RHCE, I work mostly with Ubuntu. ^_^
</description>
    <link>https://gankkank.github.io/</link>
    <atom:link href="https://gankkank.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 May 2015 21:46:24 +0800</pubDate>
    <lastBuildDate>Sun, 03 May 2015 21:46:24 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Docker with Runit</title>
        <description>&lt;p&gt;Though &lt;a href=&quot;https://docs.docker.com/articles/dockerfile_best-practices/&quot;&gt;run only one process per container&lt;/a&gt; is listed in dockerfile best practice, it&amp;#39;s may be essentail to run multiple processes for preview purpose or in a develop evenvironment. Someone also ask Docker &lt;a href=&quot;https://docs.docker.com/faq/&quot;&gt;how do I run more than one process in a Docker container&lt;/a&gt;, there are superviord, runit, s6, or daemontools, etc we can choose.&lt;/p&gt;

&lt;p&gt;There are some debtes about whether we should use runit in docker, you can read if you are interested in this. &lt;a href=&quot;https://github.com/phusion/baseimage-docker/issues/164&quot;&gt;#164&lt;/a&gt; and phusion explain why they use runit in &lt;a href=&quot;http://phusion.github.io/baseimage-docker/&quot;&gt;runit section&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;d like to choose Runit on the first try since I saw many developers are using it.&lt;/p&gt;

&lt;p&gt;As a Docker beginner, I would like to migate some web services in my KVM to Docker to follow the fashion in order to see whether I can take benefit from it. I will start with ssh before I migrate my web services.&lt;/p&gt;

&lt;p&gt;There is a good post from &lt;a href=&quot;http://www.sourcediver.org/blog/2014/11/17/using-runit-in-a-docker-container/&quot;&gt;sourcedirve.org&lt;/a&gt; also shows how to use Runit in Docker. And you can also check docker &lt;a href=&quot;https://phusion.github.io/baseimage-docker/&quot;&gt;phusion&lt;/a&gt; image.&lt;/p&gt;

&lt;h2&gt;Install&lt;/h2&gt;

&lt;p&gt;Install docker is quite straightforward:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wget -qO- https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interactive with docker:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -i -t debian /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The docker instance will exit after you hit the &lt;code&gt;exit&lt;/code&gt; command. Docker also have commands to run a process as deamon but we will discuss who to use runit to launch ssh process. &lt;/p&gt;

&lt;p&gt;The officical doc about ssh can be found at &lt;a href=&quot;https://docs.docker.com/examples/running_ssh_service/&quot;&gt;running ssh service&lt;/a&gt;. I will copy some essential settings from it to my Dockerfile.&lt;/p&gt;

&lt;h2&gt;Prepare Scripts&lt;/h2&gt;

&lt;p&gt;Runit run script to run ssh service, copy to &lt;strong&gt;/etc/service/sshd/run&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash
exec 2&amp;gt;&amp;amp;1
exec /usr/sbin/sshd -D -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Script to start runit, copy to &lt;strong&gt;/usr/sbin/runsvdir-start&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash
export &amp;gt; /etc/envvars
exec /usr/sbin/runsvdir-start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Build Image with runit&lt;/h2&gt;

&lt;p&gt;Make sure &amp;quot;./service/ssh/run&amp;quot; and &amp;quot;./runit_bootstrap&amp;quot; exist in local directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#Dockerfile
FROM debian:jessie

#
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo &amp;#39;root:screencast&amp;#39; | chpasswd
RUN sed -i &amp;#39;s/PermitRootLogin without-password/PermitRootLogin yes/&amp;#39; /etc/ssh/sshd_config

# Fix
RUN sed &amp;#39;s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g&amp;#39; -i /etc/pam.d/sshd

ENV NOTVISIBLE &amp;quot;in users profile&amp;quot;
RUN echo &amp;quot;export VISIBLE=now&amp;quot; &amp;gt;&amp;gt; /etc/profile

# prepare script
RUN mkdir -p /etc/service/ssh/
COPY ./service/ssh/run /etc/service/ssh/run
RUN chmod 755  /etc/service/ssh/run

#install, config runit
RUN touch /etc/inittab
RUN apt-get update &amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -q runit

COPY runit_bootstrap /usr/sbin/runit_bootstrap
RUN chmod 755 /usr/sbin/runit_bootstrap

EXPOSE 22
ENTRYPOINT [&amp;quot;/usr/sbin/runit_bootstrap&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After all files are ready, we can start to build the images. You can use the following commands to tag image, start docker instance, and login to docker, etc.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# start to build
docker build .
# find ID of new build image
docker images
# tag the image
docker tag 27bc398e8222 debian-runit:0.1

#An ENTRYPOINT allows you to configure a container that will run as an executable.
#So to run the image (-d deamon):
docker run -d -P -t debian-runit:0.1

# login to docker container
docker exec -i -t &amp;lt;ID&amp;gt; bash
# or:
docker attach &amp;lt;ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After you launch the docker instance you build, your can use ssh to login. Root password should be the one in Dockerfile.&lt;/p&gt;

&lt;p&gt;If you need packages like &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;psmisc&lt;/code&gt;, please add by yourself in Dockerfile.&lt;/p&gt;

&lt;p&gt;Default docker will set the ID as it&amp;#39;s hostname, to launch docker instance with a specific hostname, you can use &lt;code&gt;docker run -h debian-runit1 -d -P -t debian-runit:0.1&lt;/code&gt;. Details please check &lt;a href=&quot;https://docs.docker.com/articles/networking/&quot;&gt;docker networking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this post can help your ! I will discuss rsyslog later.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 May 2015 00:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/general/guide/2015/05/03/docker-with-runit.html</link>
        <guid isPermaLink="true">https://gankkank.github.io/general/guide/2015/05/03/docker-with-runit.html</guid>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Get start with Jekyll and Github Pages !!</title>
        <description>&lt;p&gt;Oh, yeah, I decide to get start to write some technical posts with jekyll in github pages.&lt;/p&gt;

&lt;p&gt;I would like to share with you how I get start and will update later when I find out some awesome tips !&lt;/p&gt;

&lt;h3&gt;Install&lt;/h3&gt;

&lt;p&gt;You can install either &lt;strong&gt;github-pages&lt;/strong&gt; gem or just &lt;strong&gt;jekyll&lt;/strong&gt; gem.&lt;/p&gt;

&lt;p&gt;Github-pages depends on jekyll and provides you several commands to help you work with Github Pages, such as &lt;code&gt;github-pages health-check&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;github-pages versions&lt;/code&gt; are also handy to check versions of installed gems.&lt;/p&gt;

&lt;p&gt;Please check &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;https://github.com/github/pages-gem&lt;/a&gt; for details.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# github-pages versions
+-----------------------+---------+
| Gem                   | Version |
+-----------------------+---------+
| jekyll                | 2.4.0   |
| jekyll-coffeescript   | 1.0.1   |
| jekyll-sass-converter | 1.2.0   |
| kramdown              | 1.5.0   |
| maruku                | 0.7.0   |
| rdiscount             | 2.1.7   |
| redcarpet             | 3.1.2   |
| RedCloth              | 4.2.9   |
| liquid                | 2.6.1   |
| pygments.rb           | 0.6.1   |
| jemoji                | 0.4.0   |
| jekyll-mentions       | 0.2.1   |
| jekyll-redirect-from  | 0.6.2   |
| jekyll-sitemap        | 0.8.1   |
+-----------------------+---------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# install gems&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Configure&lt;/h3&gt;

&lt;p&gt;Jekyll supports markdown and liquid, so it&amp;#39;s good to learn some basic ideas about Github &lt;a href=&quot;https://help.github.com/articles/markdown-basics/&quot;&gt;Markdown&lt;/a&gt; pages and &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt; wiki and also &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then create a git repository with &lt;code&gt;jekyll new myblog&lt;/code&gt;, it will generate all the files needed.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s important to change &lt;code&gt;_config.yml&lt;/code&gt;. Add title, email, url, etc. In addition to some essential changes, I changed markdown to use &lt;strong&gt;redcarpet&lt;/strong&gt; rather than &lt;strong&gt;kramdown&lt;/strong&gt; to render markdown docs. kramdown is weired in some conditions such as when using &lt;strong&gt;```&lt;/strong&gt; for the block content.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  markdown: redcarpet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Write and Build&lt;/h3&gt;

&lt;p&gt;Jekyll offers some handy commands to help preview your blog. &lt;code&gt;jekyll serve --watch&lt;/code&gt; will auto generate new pages by watching the files in directories.&lt;/p&gt;

&lt;p&gt;Default &lt;code&gt;jekyll build&lt;/code&gt; will build your site at &lt;code&gt;_site&lt;/code&gt; directory. You can change to other directory. For me, I just removed the &lt;code&gt;_site&lt;/code&gt; directory and linked it to the directory &lt;code&gt;gankank.github.io&lt;/code&gt;. After build, I can cd the directory to push new contents to github.&lt;/p&gt;

&lt;h3&gt;Deploy&lt;/h3&gt;

&lt;p&gt;I want to automate deploy steps when I decide to deploy new contents to github.&lt;/p&gt;

&lt;p&gt;The general steps will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;build new &lt;code&gt;_site&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add/commit new contents in &lt;code&gt;_site&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;push them to my github repository &lt;code&gt;gankank.github.io&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I write my rake task to help me deploy contents to github. To deploy, run &lt;code&gt;rake deploy&lt;/code&gt;, I default use the timestamp in the commit message when no commit message provides.&lt;/p&gt;

&lt;p&gt;To deploy with a commit message, run &lt;code&gt;rake deploy[&amp;quot;my first commit&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rakefile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rake&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w[deploy]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Build to _site&lt;/span&gt;
    &lt;span class=&quot;sb&quot;&gt;`jekyll build`&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Commit code in _site and push to github&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;auto build &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; HK&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy start&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;sb&quot;&gt;`cd _site; git add . --all; git commit -m &amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;&amp;quot;; git push`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Last&lt;/h3&gt;

&lt;p&gt;Since I&amp;#39;m a beginner to jekyll, follow &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; will be essential. Hope it&amp;#39;s a pleasant experience to write with jekyll !! &lt;/p&gt;
</description>
        <pubDate>Fri, 01 May 2015 00:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/general/guide/2015/05/01/get-start-with-jekyll.html</link>
        <guid isPermaLink="true">https://gankkank.github.io/general/guide/2015/05/01/get-start-with-jekyll.html</guid>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
  </channel>
</rss>
