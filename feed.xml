<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GANKKANK</title>
    <description>IT blogs about DEVOPS, ruby, chef and open source tools like redmine, docker, gitlab, KVM and cloud services like AWS. Through as a RHCE, I work mostly with Ubuntu. ^_^
</description>
    <link>https://gankkank.github.io/</link>
    <atom:link href="https://gankkank.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 May 2015 22:59:32 +0800</pubDate>
    <lastBuildDate>Wed, 06 May 2015 22:59:32 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Docker workflow, Part 2: Jenkins</title>
        <description>&lt;p&gt;We will discuss the technical details about implementing our workflow. This time, &amp;quot;Jenkins&amp;quot; comes first.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Jenkins provides us with an office docker image &lt;a href=&quot;https://registry.hub.docker.com/_/jenkins/&quot;&gt;jenkins:latest&lt;/a&gt; at Docker hub. You can find its git repository &lt;a href=&quot;https://github.com/jenkinsci/docker&quot;&gt;jenkinsci/docker&lt;/a&gt; at Github.&lt;/p&gt;

&lt;p&gt;My initial lifecycle events prepared for Jenkins will be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#Lifecycle Events
Start       : start jenkins with docker image with essential settings
Deploy      : deploy the latest/needed plugins or configs I want
Maintenance : backup/restore data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Get It Run&lt;/h3&gt;

&lt;p&gt;I choose to use its offical image to save my time. After it started, I sadly discoverd that I cloud only get &lt;code&gt;jenkins&lt;/code&gt; user permission by running &lt;code&gt;docker exec&lt;/code&gt; command.
&lt;sup class=&#39;sidenote-number&#39;&gt;1&lt;/sup&gt;&lt;span class=&#39;sidenote&#39;&gt;&lt;sup class=&#39;sidenote-number&#39;&gt;1&lt;/sup&gt; &lt;a href=&quot;https://github.com/docker/docker/issues/8798&quot;&gt;#8798&lt;/a&gt; will add functions to login to a specific user in &lt;code&gt;docker exec&lt;/code&gt;&lt;/span&gt;
I have to use the method provided in it&amp;#39;s github to install plugins (I use chef to help me previously), since I want to automate the &amp;quot;install plugins&amp;quot; process.&lt;/p&gt;

&lt;p&gt;Its readme page suggests you to add a plugins.txt file and run its script to install them.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#Dockerfile
FROM jenkins
COPY plugins.txt /usr/share/jenkins/plugins.txt
RUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I built my image and started it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -p 8080:8080 -v /opt/docker_volumes/jenkins:/var/jenkins_home --name jenkins1 -h jenkins1 gankkank/jenkins:1.596.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, it failed to install plugins.&lt;/p&gt;

&lt;p&gt;After digging for a while with &lt;code&gt;docker logs -f&lt;/code&gt; and &lt;code&gt;docker exec&lt;/code&gt;, I found, somehow, it cloudn&amp;#39;t download the right files of plugins.
&lt;sup class=&#39;sidenote-number&#39;&gt;2&lt;/sup&gt;&lt;span class=&#39;sidenote&#39;&gt;&lt;sup class=&#39;sidenote-number&#39;&gt;2&lt;/sup&gt; I will check this later since it&amp;#39;s not essential&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;jenkins@jenkins2:/$ cat /var/jenkins_home/plugins/embeddable-build-status.hpi
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;404 Not Found&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Not Found&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The requested URL /plugins/embeddable-build-status//embeddable-build-status.hpi was not found on this server.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;address&amp;gt;&lt;/span&gt;Apache/2.2.14 (Ubuntu) Server at mirrors.jenkins-ci.org Port 80&lt;span class=&quot;nt&quot;&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Deploy&lt;/h3&gt;

&lt;p&gt;Since it&amp;#39;s not essential for me to prepare all plugins during the &amp;quot;Start&amp;quot; lifecycle, I will go with my approach.&lt;/p&gt;

&lt;p&gt;Add Script to install plugins &lt;code&gt;install-plugins.sh&lt;/code&gt;
&lt;sup class=&#39;sidenote-number&#39;&gt;3&lt;/sup&gt;&lt;span class=&#39;sidenote&#39;&gt;&lt;sup class=&#39;sidenote-number&#39;&gt;3&lt;/sup&gt; Need second thought on this, using bash script is not quite a good idea&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install plugins&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;plugin &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080/  install-plugin &lt;span class=&quot;nv&quot;&gt;$plugin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add Script to update index. &lt;code&gt;update-index.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
wget http://updates.jenkins-ci.org/update-center.json -qO- | sed &lt;span class=&quot;s1&quot;&gt;&#39;1d;$d&#39;&lt;/span&gt;  &amp;gt; /var/jenkins_home/updates/default.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add in dockerfile:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#Dockerfile
FROM jenkins

# Copy Scripts
COPY install-plugins.sh /var/jenkins_home/install-plugins.sh
COPY update-index.sh /var/jenkins_home/update-index.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build, tag and run my image again:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run&lt;/span&gt;
docker run -d -p 8081:8080 -v /opt/docker_volumes/jenkins:/var/jenkins_home &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --name jenkins2 -h jenkins2 -t gankkank/jenkins:1.596.2

&lt;span class=&quot;c&quot;&gt;# Update Index&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -t jenkins2 bash /var/jenkins_home/update-index.sh

&lt;span class=&quot;c&quot;&gt;# Install Plugin&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -t jenkins2 bash /var/jenkins_home/install-plugins.sh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  git git-client ansicolor view-job-filters build-pipeline-plugin simple-theme-plugin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  jquery dashboard-view jenkins-multijob-plugin warnings github rubyMetrics &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  AdaptivePlugin embeddable-build-status

&lt;span class=&quot;c&quot;&gt;# Restart&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -t jenkins2 java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080/ restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, That&amp;#39;s done and it seems no problem occured.&lt;/p&gt;

&lt;h3&gt;Backup and Restore&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot;&gt;Docker volumns&lt;/a&gt; page, Docker suggests us to create a volumn instance and then launch another instance to use volumn from the previous one. This helps us to backup and restore data without getting our hands dirty with Docker host (avoid matching the host uid/gid to a container uid/gid, etc).
&lt;sup class=&#39;sidenote-number&#39;&gt;4&lt;/sup&gt;&lt;span class=&#39;sidenote&#39;&gt;&lt;sup class=&#39;sidenote-number&#39;&gt;4&lt;/sup&gt; Blogs &lt;a href=&quot;http://alvinhenrick.com/2015/01/26/docker-backup-and-restore-volume-container/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://medium.com/@ramangupta/why-docker-data-containers-are-good-589b3c6c749e&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In generally, we will start two instances:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Create data volumn container (without -d)
docker create -v /opt/docker_volumes/jenkins:/var/jenkins_home --name jenkins_home ubuntu /bin/true

# Launch docker instance
docker run -d -p 8083:8080 --volumes-from jenkins_home --name jenkins3 gankkank/jenkins:1.596.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we want to backup/restore the data, we will launch docker instances to do the tasks for us.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Backup
docker run --volumes-from jenkins_home -v $(pwd):/backup ubuntu:14.04 tar cvf /backup/jenkins-2015-05-06.tar /var/jenkins_home

# Restore. (After launch a new data container)
docker create -v /opt/docker_volumes/jenkins_b:/var/jenkins_home --name jenkins_home_b ubuntu:14.04 /bin/true
docker run --volumes-from jenkins_home_b -v $(pwd):/backup ubuntu:14.04 tar xvf /backup/jenkins-2015-05-06.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Last&lt;/h3&gt;

&lt;p&gt;Finally, Docker&amp;#39;s way seems a quite different way from the traditional one. Hopefully it will help us get things done easier.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 May 2015 07:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/articles/2015/05/07/docker-workflow-jenkins</link>
        <guid isPermaLink="true">https://gankkank.github.io/articles/2015/05/07/docker-workflow-jenkins</guid>
        
        <category>docker</category>
        
        <category>jenkins</category>
        
        <category>continuous integration</category>
        
        <category>workflow</category>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Docker workflow, Part 1: Get Start</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt; is easy, fun and great to share your docker images to others. But you should be careful when you push your images to docker hub. Please check and remove your credentials before you build images and push them to docker hub.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Work with Docker Images&lt;/h2&gt;

&lt;p&gt;Get start to &lt;a href=&quot;https://docs.docker.com/userguide/dockerimages/&quot;&gt;work with docker images&lt;/a&gt; by leveraging docker commands such as &lt;code&gt;docker pull&lt;/code&gt;, &lt;code&gt;docker build&lt;/code&gt;, &lt;code&gt;docker commit -m &amp;quot;comments&amp;quot; -a &amp;quot;author&amp;quot;&lt;/code&gt;, &lt;code&gt;docker push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tags are handy to distinguish different image versions.&lt;/p&gt;

&lt;p&gt;Such as &lt;code&gt;docker pull ubuntu&lt;/code&gt; will download the latest version of ubuntu and &lt;code&gt;docker pull ubuntu:14.04&lt;/code&gt; will download the 14.04 version. So, you&amp;#39;d better make sure that you have specified an image version in Dockerfile, otherwise, you may encounter problems when ubuntu have updated its latest version from 12.04 to 14.04.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Dockerfile
FROM ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;My Workflow&lt;/h2&gt;

&lt;p&gt;When working with something credential, we have to use servers to host our own services/data. We have a similiar workflow compared to the public approach.&lt;/p&gt;

&lt;p&gt;We host our code using &lt;a href=&quot;https://about.gitlab.com/downloads/&quot;&gt;Gitlab CE&lt;/a&gt; (Thanks Gitlab, it&amp;#39;s a great project)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The current workflow to use git is:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;User update git repository in Gitlab CE.&lt;/li&gt;
&lt;li&gt;Gitlab CE hooks call Jenkins to run jobs.&lt;/li&gt;
&lt;li&gt;Jenkins run the jobs and produce a result.&lt;/li&gt;
&lt;li&gt;User view jenkins result at Gitlab CE page.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;When we use docker&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;User update git repository for Dockerfile.&lt;/li&gt;
&lt;li&gt;Gitlab CE hooks call Jenkins to run jobs.&lt;/li&gt;
&lt;li&gt;Jenkins build docker images.&lt;/li&gt;
&lt;li&gt;Jenkins start and test the docker images.&lt;/li&gt;
&lt;li&gt;User view jenkins result at Gitlab CE page.&lt;/li&gt;
&lt;li&gt;Docker registry server serve the builded docker images (if jenkins tests are successful).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Last&lt;/h2&gt;

&lt;p&gt;Docker&amp;#39;s registry service have been rewritten in golang - &lt;a href=&quot;https://docs.docker.com/registry/&quot;&gt;Docker Registry 2.0&lt;/a&gt; at &lt;a href=&quot;https://github.com/docker/distribution&quot;&gt;docker/distribution&lt;/a&gt; in Github. Hope it&amp;#39;s good for production environment.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2015 07:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/articles/2015/05/06/docker-workflow</link>
        <guid isPermaLink="true">https://gankkank.github.io/articles/2015/05/06/docker-workflow</guid>
        
        <category>docker</category>
        
        <category>jenkins</category>
        
        <category>continuous integration</category>
        
        <category>workflow</category>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Docker with Runit, Part 2: Rsyslog</title>
        <description>&lt;p&gt;Before we start to use syslog within docker instance, I found some posts discussing &lt;a href=&quot;https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&quot;&gt;docker zombie process problem&lt;/a&gt; and &lt;a href=&quot;https://blog.phusion.nl/2015/01/20/baseimage-docker-fat-containers-treating-containers-vms/&quot;&gt;whether we should use ssh or just &lt;code&gt;docker exec&lt;/code&gt;&lt;/a&gt;
&lt;sup class=&#39;sidenote-number&#39;&gt;1&lt;/sup&gt;&lt;span class=&#39;sidenote&#39;&gt;&lt;sup class=&#39;sidenote-number&#39;&gt;1&lt;/sup&gt; Post series from phusion&lt;/span&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;code&gt;docker exec&lt;/code&gt; is introduced since docker 1.4, user will get root access to the docker instance after they login. So, SSH is helpful in certain conditions. &lt;a href=&quot;http://eng.rightscale.com/2014/10/27/dockerizing-rightscale.html&quot;&gt;Rightscale&lt;/a&gt; shared their idea on &amp;quot;how to use SSH in docker with host SSH agent socket and how to handle logs&amp;quot;, which is also worth reading.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#39;s come back to rsyslog.&lt;/p&gt;

&lt;h3&gt;Run rsyslog&lt;/h3&gt;

&lt;p&gt;A syslog daemon is necessary for many services include kernel itself. We will still use runit to indicate how to use syslog within docker instance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runit script to run rsyslog, copy to &lt;strong&gt;/etc/service/rsyslog/run&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;2&amp;gt;&amp;amp;1
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /
chgrp syslog /var/log
chmod g+w /var/log
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rsyslogd -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#Dockerfile
FROM debian:jessie

# install, config rsyslog
RUN apt-get update &amp;amp;&amp;amp; apt-get install rsyslog
RUN mkdir -p /etc/service/rsyslog/
COPY ./service/rsyslog/run /etc/service/rsyslog/run
RUN chmod 755  /etc/service/rsyslog/run

# install, config runit
RUN touch /etc/inittab
RUN apt-get update &amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -q runit

COPY runit_bootstrap /usr/sbin/runit_bootstrap
RUN chmod 755 /usr/sbin/runit_bootstrap

ENTRYPOINT [&quot;/usr/sbin/runit_bootstrap&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Build image, tag and run it&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;docker build .
docker tag 5416c3b71823 debian-runit:rsyslog

# --name:   set docker NAME, should be used before option -t
# -h:       set docker instance hostname
docker run -d --name runit-rsyslog1 -h runit-rsyslog1 -t debian-runit:rsyslog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Check&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check processes running in docker instance.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# docker exec -i -t runit-rsyslog1 bash
# pstree
runsvdir---runsv---rsyslogd-+-{in:imuxsock}
                            `-{rs:main Q:Reg}`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 05 May 2015 07:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/articles/2015/05/05/docker-with-syslog</link>
        <guid isPermaLink="true">https://gankkank.github.io/articles/2015/05/05/docker-with-syslog</guid>
        
        <category>docker</category>
        
        <category>runit</category>
        
        <category>syslog</category>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Docker with Runit, Part 1: SSH</title>
        <description>&lt;p&gt;Though &lt;a href=&quot;https://docs.docker.com/articles/dockerfile_best-practices/&quot;&gt;run only one process per container&lt;/a&gt; is listed in dockerfile best practice, it&amp;#39;s maybe essentail to run multiple processes for preview purpose or in a development environment.&lt;/p&gt;

&lt;p&gt;Someone also ask Docker &lt;a href=&quot;https://docs.docker.com/faq/&quot;&gt;how do I run more than one process in a Docker container&lt;/a&gt;, there are superviord, runit, s6, or daemontools, etc. we can choose.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There are some debtes about whether we should use runit in docker, you can read if you are interested in this. &lt;a href=&quot;https://github.com/phusion/baseimage-docker/issues/164&quot;&gt;#164&lt;/a&gt; and phusion explain why they use runit in &lt;a href=&quot;http://phusion.github.io/baseimage-docker/&quot;&gt;runit section&lt;/a&gt; and &lt;a href=&quot;https://github.com/phusion/baseimage-docker#docker_single_process&quot;&gt;in github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will choose Runit on the first try since I saw many developers are using it.&lt;/p&gt;

&lt;p&gt;As a Docker beginner, it&amp;#39;s fantastic to migrate some web services in my KVM to Docker to follow the fashion in order to see whether I can take benefit from it. I will start with ssh before I migrate my web services.&lt;/p&gt;

&lt;p&gt;There is a good post from &lt;a href=&quot;http://www.sourcediver.org/blog/2014/11/17/using-runit-in-a-docker-container/&quot;&gt;sourcedirve.org&lt;/a&gt;, which shows us how to use Runit in Docker. And you can also check docker &lt;a href=&quot;https://phusion.github.io/baseimage-docker/&quot;&gt;phusion&lt;/a&gt; image.&lt;/p&gt;

&lt;h2&gt;Install&lt;/h2&gt;

&lt;p&gt;To install docker is quite straightforward:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;wget -qO- https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, To interactive with docker instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;docker run -i -t debian /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The docker instance will exit after you hit the &lt;code&gt;exit&lt;/code&gt; command. Docker also have commands to run a process as daemon but we will discuss how to use runit to launch ssh process. &lt;/p&gt;

&lt;p&gt;The officical doc about ssh can be found at &lt;a href=&quot;https://docs.docker.com/examples/running_ssh_service/&quot;&gt;running ssh service&lt;/a&gt;. Some settings in the document is essential to get the SSH service running in docker instance.&lt;/p&gt;

&lt;h2&gt;Prepare Scripts&lt;/h2&gt;

&lt;p&gt;Runit run script to run ssh service, copy to &lt;strong&gt;/etc/service/sshd/run&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;2&amp;gt;&amp;amp;1
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /usr/sbin/sshd -D -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Script to start runit, copy to &lt;strong&gt;/usr/sbin/runsvdir-start&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &amp;gt; /etc/envvars
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /usr/sbin/runsvdir-start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Build Image with runit&lt;/h2&gt;

&lt;p&gt;Make sure &amp;quot;./service/ssh/run&amp;quot; and &amp;quot;./runit_bootstrap&amp;quot; exist in local directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#Dockerfile
FROM debian:jessie

#
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y openssh-server
RUN mkdir /var/run/sshd
RUN echo &#39;root:screencast&#39; | chpasswd
RUN sed -i &#39;s/PermitRootLogin without-password/PermitRootLogin yes/&#39; /etc/ssh/sshd_config

# Fix
RUN sed &#39;s@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g&#39; -i /etc/pam.d/sshd

ENV NOTVISIBLE &quot;in users profile&quot;
RUN echo &quot;export VISIBLE=now&quot; &amp;gt;&amp;gt; /etc/profile

# prepare script
RUN mkdir -p /etc/service/ssh/
COPY ./service/ssh/run /etc/service/ssh/run
RUN chmod 755  /etc/service/ssh/run

#install, config runit
RUN touch /etc/inittab
RUN apt-get update &amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -q runit

COPY runit_bootstrap /usr/sbin/runit_bootstrap
RUN chmod 755 /usr/sbin/runit_bootstrap

EXPOSE 22
ENTRYPOINT [&quot;/usr/sbin/runit_bootstrap&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After all files are ready, we can start to build the images. You can use the following commands to tag image, start docker instance, and login to docker, etc.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# start to build
docker build .
# find ID of new build image
docker images
# tag the image
docker tag 27bc398e8222 debian-runit:0.1

#An ENTRYPOINT allows you to configure a container that will run as an executable.
#So to run the image (-d deamon):
docker run -d -P -t debian-runit:0.1

# login to docker container
docker exec -i -t &amp;lt;ID&amp;gt; bash
# or:
docker attach &amp;lt;ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After you launch the docker instance you build, your can use ssh to login. Root password should be the one in Dockerfile.&lt;/p&gt;

&lt;p&gt;If you need packages like &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;psmisc&lt;/code&gt;, please add by yourself in Dockerfile.&lt;/p&gt;

&lt;p&gt;Default docker will set the ID as it&amp;#39;s hostname, to launch docker instance with a specific hostname, you can use &lt;code&gt;docker run -h debian-runit1 -d -P -t debian-runit:0.1&lt;/code&gt;. For details please check &lt;a href=&quot;https://docs.docker.com/articles/networking/&quot;&gt;docker networking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this post can help you and I will discuss rsyslog later.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 07:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/articles/2015/05/04/docker-with-runit</link>
        <guid isPermaLink="true">https://gankkank.github.io/articles/2015/05/04/docker-with-runit</guid>
        
        <category>docker</category>
        
        <category>runit</category>
        
        <category>ssh</category>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
      <item>
        <title>Get start with Jekyll and Github Pages !!</title>
        <description>&lt;p&gt;Oh, yeah, I decide to get start to write some technical posts with jekyll in github pages.&lt;/p&gt;

&lt;p&gt;I would like to share with you how I get start and will update later when I find out some awesome tips!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let&amp;#39;s get started !&lt;/p&gt;

&lt;h3&gt;Install&lt;/h3&gt;

&lt;p&gt;You can install either &lt;strong&gt;github-pages&lt;/strong&gt; gem or just &lt;strong&gt;jekyll&lt;/strong&gt; gem.&lt;/p&gt;

&lt;p&gt;Github-pages depends on jekyll and provides you several commands to help you work with Github Pages, such as &lt;code&gt;github-pages health-check&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;github-pages versions&lt;/code&gt; are also handy to check versions of installed gems.&lt;/p&gt;

&lt;p&gt;Please check &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;https://github.com/github/pages-gem&lt;/a&gt; for details.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# github-pages versions
+-----------------------+---------+
| Gem                   | Version |
+-----------------------+---------+
| jekyll                | 2.4.0   |
| jekyll-coffeescript   | 1.0.1   |
| jekyll-sass-converter | 1.2.0   |
| kramdown              | 1.5.0   |
| maruku                | 0.7.0   |
| rdiscount             | 2.1.7   |
| redcarpet             | 3.1.2   |
| RedCloth              | 4.2.9   |
| liquid                | 2.6.1   |
| pygments.rb           | 0.6.1   |
| jemoji                | 0.4.0   |
| jekyll-mentions       | 0.2.1   |
| jekyll-redirect-from  | 0.6.2   |
| jekyll-sitemap        | 0.8.1   |
+-----------------------+---------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# install gems&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pages&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Configure&lt;/h3&gt;

&lt;p&gt;Jekyll supports markdown and liquid, so it&amp;#39;s good to learn some basic ideas about Github &lt;a href=&quot;https://help.github.com/articles/markdown-basics/&quot;&gt;Markdown&lt;/a&gt; pages and &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt; wiki and also &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then create a git repository with &lt;code&gt;jekyll new myblog&lt;/code&gt;, it will generate all the files needed.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s important to change &lt;code&gt;_config.yml&lt;/code&gt;. Add title, email, url, etc. In addition to some essential changes, I changed markdown to use &lt;strong&gt;redcarpet&lt;/strong&gt; rather than &lt;strong&gt;kramdown&lt;/strong&gt; to render markdown docs. kramdown is weired in some conditions such as when using &lt;strong&gt;```&lt;/strong&gt; for the block content.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;  markdown: redcarpet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Write and Build&lt;/h3&gt;

&lt;p&gt;Jekyll offers some handy commands to help preview your blog. &lt;code&gt;jekyll serve --watch&lt;/code&gt; will auto generate new pages by watching the files in directories.&lt;/p&gt;

&lt;p&gt;Default &lt;code&gt;jekyll build&lt;/code&gt; will build your site at &lt;code&gt;_site&lt;/code&gt; directory. You can change to other directory. For me, I just removed the &lt;code&gt;_site&lt;/code&gt; directory and linked it to the directory &lt;code&gt;gankank.github.io&lt;/code&gt;. After build, I can cd the directory to push new contents to github.&lt;/p&gt;

&lt;h3&gt;Deploy&lt;/h3&gt;

&lt;p&gt;I want to automate deploy steps when I decide to deploy new contents to github.&lt;/p&gt;

&lt;p&gt;The general steps will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;build new &lt;code&gt;_site&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add/commit new contents in &lt;code&gt;_site&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;push them to my github repository &lt;code&gt;gankank.github.io&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I write my rake task to help me deploy contents to github. To deploy, run &lt;code&gt;rake deploy&lt;/code&gt;, I default use the timestamp in the commit message when no commit message provides.&lt;/p&gt;

&lt;p&gt;To deploy with a commit message, run &lt;code&gt;rake deploy[&amp;quot;my first commit&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rakefile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w[deploy]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Build to _site&lt;/span&gt;
    &lt;span class=&quot;sb&quot;&gt;`jekyll build`&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Commit code in _site and push to github&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;comment: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;auto build &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; HK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deploy start&quot;&lt;/span&gt;
    &lt;span class=&quot;sb&quot;&gt;`cd _site; git add . --all; git commit -m &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;&quot;; git push`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Last&lt;/h3&gt;

&lt;p&gt;Since I&amp;#39;m a beginner to jekyll, follow &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; will be essential. Hope it&amp;#39;s a pleasant experience to write with jekyll !! &lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 07:00:00 +0800</pubDate>
        <link>https://gankkank.github.io/articles/2015/05/02/get-start-with-jekyll</link>
        <guid isPermaLink="true">https://gankkank.github.io/articles/2015/05/02/get-start-with-jekyll</guid>
        
        <category>jekyll</category>
        
        <category>github-pages</category>
        
        
        <category>general</category>
        
        <category>guide</category>
        
      </item>
    
  </channel>
</rss>
